GParallelizer

0.8.4
DataFlows
Improved Gradle build
Maintenance

0.8.3
Enabled Gradle builds
Uploaded into a maven repository

0.8.2
Updated for groovy 1.6.4
Added the await() method to the SafeVariable class
Added the instantVal property to the SafeVariable class to prioritize read requests

0.8.1
Added SafeVariable
Migrated DataFlowStream to Java
Fixed problem with nested actor creation closures
Added short-hand methods for concurrent collection processing to Asynchronizer and Parallelizer

0.8
Added DataFlow concurrency support
Added sendAndWait() methods to actors to block the caller until a reply arrives
Added an experimental option to use the JSR-166y ForkJoin pool for actors
Enabled thread-bound actors to reuse threads from a resizeable common pool
Added AsyncEnhancer and ParallelEnhancer classes enabling asynchronous collection processing through meta-class enhancements
Restructured actor groups with respect to the thread-bound actor thread reuse and Fork/Join pool support
Supported @Immutable for messages
Ability to join actors to await their termination
Ability to suspend actor and message enhancements for replies, which has impact on message delivery speed
Restructured actor classes to increase code reuse
Removed the beforeStop() lifecycle method from actors
Fixed the event-driven actor's loop, when no react is called
DynamicDispatchActor added to allow for an alternative message handling syntax - dynamic method dispatch to multiple onMessage() methods
Added a Reactor implementation - a special purpose actor, which after receiving a message runs its body with the message as a parameter and the result of the code is send in reply.
Several performance benchmarks included
Minor performance optimizations
Bugfixing

0.7
Reply methods for thread-bound actors
Reply methods available on received messages
Ability to send replies between thread-bound and event-driven actors in both directions
Documented structuring actors code and implementing event-driven loops
Overloaded the << operator to perform send
Handling multiple messages in single receive/react
Actor groups, multiple independent configurable thread pools
Gradle build script 

0.6
Event-driven (pooled) actors

0.5
Mixin support
The act() method wrapped with TimeCategory to allow for time DSL in receive() calls

0.4
Actors added

0.3
Set default pool size to Ncpu + 1, where Ncpu is the number of CPU in the system.
Made pool threads to be non-daemon.
Updated documentation.

0.2
Enabled calling withParallelizer() and withAsynchronizer() methods on any object.

0.1
Initial release of the core functionality for both Parallelizer, which uses JSR-166y Parallel Arrays,
and Asynchronizer, which uses Java's executor services.
