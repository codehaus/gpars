    Document before next release
    todo add custom DSL definitions
    todo SafeVariables should give readers higher priority - do them synchronously
    todo enable wait for SafeVariable
    todo when uploading next release: - update wiki to reflect change from DataFlow.thread{} to start{}

    Planned for the next release

    todo automate creation of code sample download, javadoc download, source download
    todo tune maven repository upload

    todo add generics to SafeVariable
    todo add @Immutable back to three tests
    todo Think of an example on SafeVariable subclass

    todo DataFlows
    todo Detecting deadlock in the DataFlows class
    todo used generics with DataFlows to support DataFlowVariable.val type hints in IDE
    todo consider using AST transformations to generate CPS (continuation-passing style) for event-driven actors to offer a frendlier way to code them


    Backlog
    todo add a script task to download all dependencies for IDEs
    todo reimplement Dataflow concurrency with the concept of operators and channels
    todo remove start/stop methods from actors
    todo allow join on groups of actors or Dataflow treads
    todo clean issues and todos
    todo Logging policy - perhaps leveraging the current lifecycle methods
    todo Maybe SafeVariables could be used for ActorMetaClass
    todo build with maven
    todo look into MINA
    todo test with java.nio
    todo onTimeout handler as a react parameter - pass TIMEOUT into the react handler
    todo unify actors and pooled actors behavior on timeout and exception, (retry after timeout and exception or stop)


    //todo consider simplified fast actors
    //todo consider extensibility for actors - custom schedulers
    //todo remove FJPool, ResizableFJPool and ActorBarrier if not needed
    //todo consider using builder for message handling
    //todo out-of-order message processing
    //todo optimize AsyncUtil implementation to split collections among available threads
    //todo send returning Future for actor reply

    //todo consider the asynchronous metaclass
    //todo use AST transformation to turn actors methods into async processing
    //todo try the fixes for the MixinTest
    //todo support mixins for event-driven actors

    Speed-up tips
    //todo use TaskBarrier instead of CountDownLatch in AbstractThreadActor - need to resolve blocking on the message queue
    //todo use LinkedTransferQueue with ForkJoin
    //todo remove type info for speed-up
    //todo ActorAction into Java
    //todo speedup actor creation
    //todo switch each to for loops where helping performance
    //todo reconsider locking in Actors
    //todo implement in Java
    //todo consider flow control to throttle message production
    //todo resize the pool if all threads are busy or blocked
    //todo rewrite the pool implementation
    //todo asynchronous race-free non-blocking queues

    To consider
    //todo multiple loops
    //todo exit the current loop
    //todo test on Google App Engine
    //todo consider other types of queues
    //todo actor groups could manage actors and give public access to them
    //todo thread-bound actors could use threads from a pool or share a thread factory
    //todo shorten method names withAsynchronizer and withParallelizer doAsync, doParallel
    //todo add sendLater(Duration) and sendAfterDone(Future)
    //todo consider pass by copy (clone, serialization) for mutable messages, reject mutable messages otherwise
    //todo unify and publish spawn operation and mail boxes
    //todo associate a mail box with each thread, not only with actors
    //todo add generics to actors
    //todo implement remote actors



CPS
When I looked into Scala actors, I didn't like the fact that event-
based actors needed to be written in continuation-passing style (CPS).
A user really shouldn't have to worry about this (as in Erlang). Have
you considered using an AST transform to rewrite event-based actor
code to CPS? (Scala 2.8 will introduce continuations, implemented as a
compiler plugin. I think it's planned to leverage them for the actors
library).
