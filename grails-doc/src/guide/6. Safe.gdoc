The SafeVariable class, which is a special-purpose thread-safe non-blocking reference implementation inspired by Agents in Clojure.

{note:title=Pending rename}
Until 0.8 versions, this concept was called SafeVariable. Since 0.9 it will simply called Safe.
This page reflects usage in the 0.8 version.
{note}

h1. Introduction

In the Clojure programing language you can find a concept of Agents, which essentially behave like actors accepting code (functions) as messages. After reception the received function is run against the internal state of the Agent and the return value of the function is considered to be the new internal state of the Agent.

Essentially, agents safe-guard mutable values by allowing only a single *agent-managed thread* to make modifications to them. The mutable values are *not directly accessible* from outside, but instead *requests have to be sent to the agent* and the agent guarantees to process the requests sequentially on behalf of the callers. Agents guarantee sequential execution of all requests and so consistency of the values.

Schematically:
{code}agent = new Agent(0)  //created a new Agent wrapping an integer with initial value 0
agent.send {increment()}  //asynchronous send operation, sending the increment() function
...
//after some delay to process the message the internal Agent's state has been updated
...
assert agent.val== 1
{code}
To wrap integers, we can certainly use AtomicXXX types on the Java platform, but when the state is a more complex object we need more support.


h1. Concepts

GPars provides a SafeVariable class, which is a special-purpose thread-safe non-blocking reference implementation inspired by Agents in Clojure.

A SafeVariable wraps a reference to mutable state, held inside a single field, and accepts code (closures / commands) as messages, which can be sent to the SafeVariable just like to any other actor using the '<<' operator or any of the send() methods. After reception of a closure / command, the closure is invoked against the internal mutable field and can make changes to it. The closure is guaranteed to be run without intervention from other threads and so may freely alter the internal state of the SafeVariable held in the internal <i>data</i> field.

The whole update process is of the fire-and-forget type, since once the message (closure) is sent to the SafeVariable, the caller thread can go off to do other things and come back later to check the current value with SafeVariable.val or SafeVariable.valAsync(closure).

h3. Basic rules
* The *return value* of the submitted closure is *sent in reply* to the sender of the closure.
* If the message sent to a _SafeVariable_ is *not a closure*, it is considered to be a *new value* for the internal reference field.
* The internal reference can also be changed using the *updateValue() method* from within the received closures.
* The _val_ property of a _SafeVariable_ will safely return the current value of the SafeVariable.
* The _valAsync()_ method will do the same *without blocking* the caller.
* Since a _SafeVariable_ is an actor, you can call _stop()_ and _join()_ methods on it to shut it down explicitly.

h1. Examples

h2. Shared list of members

The SafeVariable wraps a list of members, who have been added to the jug. To add a new member a message (command to add a member) has to be sent to the _jugMembers_ SafeVariable.
{code}import groovyx.gpars.actor.SafeVariable

def jugMembers = new SafeVariable<List>(['Me'])  //add Me

jugMembers.send {it.add 'James'}  //add James

final Thread t1 = Thread.start {
    jugMembers.send {it.add 'Joe'}  //add Joe
}

final Thread t2 = Thread.start {
    jugMembers << {it.add 'Dave'}  //add Dave
    jugMembers << {it.add 'Alice'}  //add Alice
}

[t1, t2]*.join()
println jugMembers.val
jugMembers.valAsync {println "Current members: $it"}

System.in.read()
jugMembers.stop()
{code}

h2. Shared conference counting number of registrations

The Conference class allows registration and unregistration, however these methods can only be called from the commands sent to the _conference_ SafeVariable.
{code}import groovyx.gpars.actor.SafeVariable

class Conference extends SafeVariable {
    def Conference() { super(0L) }
    private def register(long num) { data += num }
    private def unregister(long num) { data -= num }
}

final SafeVariable conference = new Conference()

final Thread t1 = Thread.start {
    conference << {register(10)}
}

final Thread t2 = Thread.start {
    conference << {register(5)}
}

final Thread t3 = Thread.start {
    conference << {unregister(3)}
}

[t1, t2, t3]*.join()

assert 12 == conference.val
{code}

h2. The shopping cart example

{code}
import groovyx.gpars.actor.Safe

class ShoppingCart {
    private def cartState = new Safe([:])
//----------------- public methods below here ----------------------------------
    public void addItem(String product, int quantity) {
        cartState << {it[product] = quantity}  //the << operator sends
                                               //a message to the SafeVariable
    }    public void removeItem(String product) {
        cartState << {it.remove(product)}
    }    public Object listContent() {
        return cartState.val
    }    public void clearItems() {
        cartState << performClear
    }

    public void increaseQuantity(String product, int quantityChange) {
        cartState << this.&changeQuantity.curry(product, quantityChange)
    }
//----------------- private methods below here ---------------------------------
    private void changeQuantity(String product, int quantityChange, Map items) {
        items[product] = (items[product] ?: 0) + quantityChange
    }    private Closure performClear = { it.clear() }
}
//----------------- script code below here -------------------------------------
final ShoppingCart cart = new ShoppingCart()
cart.addItem 'Pilsner', 10
cart.addItem 'Budweisser', 5
cart.addItem 'Staropramen', 20

cart.removeItem 'Budweisser'
cart.addItem 'Budweisser', 15

println "Contents ${cart.listContent()}"

cart.increaseQuantity 'Budweisser', 3
println "Contents ${cart.listContent()}"

cart.clearItems()
println "Contents ${cart.listContent()}"
{code}
You might have noticed two implementation strategies in the code.

1. Public methods may internally just send the required code off to the Agent, instead of executing the same functionality directly

And so sequential code like
{code}
public void addItem(String product, int quantity) {
    cartState[product]=quantity

}
{code}
becomes

{code}
public void addItem(String product, int quantity) {
    cartState << {it[product] = quantity}
}
{code}
2. Public methods may send references to internal private methods or closures, which hold the desired functionality to perform
{code}
public void clearItems() {
    cartState << performClear
}

private Closure performClear = { it.clear() }
{code}
*Currying might be necessary*, if the closure takes other arguments besides the current internal state instance. See the _increaseQuantity_ method.

h2. The printer service example

Another example - a not thread-safe printer service shared by multiple threads. The printer needs to have the document and quality properties set before printing, so obviously a potential for race conditions if not guarded properly. Callers don't want to block until the printer is available, which the fire-and-forget nature of actors solves very elegantly.
{code}import groovyx.gpars.actor.SafeVariable

class PrinterService {
    String document
    String quality

    public void printDocument() {
        println "Printing $document in $quality quality"
        Thread.sleep 5000
        println "Done printing $document"
    }
}

def printer = new SafeVariable<PrinterService>(new PrinterService())

final Thread thread1 = Thread.start {
    for (num in (1..3)) {
        final String text = "document $num"
        printer << {printerService ->
            printerService.document = text
            printerService.quality = 'High'
            printerService.printDocument()
        }
        Thread.sleep 200
    }
    println 'Thread 1 is ready to do something else. All print tasks have been submitted'
}

final Thread thread2 = Thread.start {
    for (num in (1..4)) {
        final String text = "picture $num"
        printer << {printerService ->
            printerService.document = text
            printerService.quality = 'Medium'
            printerService.printDocument()
        }
        Thread.sleep 500
    }
    println 'Thread 2 is ready to do something else. All print tasks have been submitted'
}

[thread1, thread2]*.join()
printer << {stop()}
printer.join()
{code}
For latest update, see the respective [Demos].

h2. Reading the value

To follow the clojure philosophy closely the Safe class gives reads higher priority than to writes.
By using the _instantVal_ property your read request will bypass the incoming message queue of the Safe
and return the current snapshot of the internal state.
The _val_ property will wait in the message queue for processing, just like the non-blocking variant
_valAsync(Clojure cl)_ , which will invoke the provided closure with the internal state as a parameter.

You have to bear in mind that the _instantVal_ property might return although correct, but randomly looking results, since the internal state
of the Safe at the time of _instantVal_ execution is non-deterministic and depends on the messages that have been processed
before the thread scheduler executes the body of _instantVal_.

The _await()_ method allows you to wait for processing all the messages submitted to the Safe before and so blocks
the calling thread.

h3. State copy strategy

To avoid leaking the internal state the Safe class allows to specify a copy strategy as the second constructor argument.
With the copy strategy specified, the internal state is processed by the copy strategy closure and the output value
of the copy strategy value is returned to the caller instead of the actual internal state. This applies to _instantVal_,
_val_ as well as to _valAsync()_.